Overview 
CRUD.py handles the operations that touch the files themselves.

Imports
json
pathlib -> Path
helper.utilities
traceback
os
shutil
datetime
nicegui -> app

Create New JSON file
create_new_json_file(full_file_path: str, dict_to_convert: dict, include_debug: bool = False) -> dict

####Overview
Handles writing the converted dict into JSON and then writing it into the file. Should write errors to log file.

Arguments
 - takes full_file_path
 - takes dict_to_convert (to JSON)
 - optionally takes a boolean (include_debut)
 - Returns a dictionary

 Return 
 result_dict {'result': bool, 'message': string, 'path': string of file path, 'debug': string of exception}

Dependencies
Path : library -> handles formatting strings into windows format
convert_obj_to_json : utilities.py -> handles converting the dict into a json object.

References
3 references
assethandler.py -> new_asset_gui
gamehandler.py -> new_game_gui
savehandler.py -> new_save_gui



Create New Directory
create_new_directory(passed_directory_path: str, debug_mode: bool = False) -> dict

####Overview
Handles creating a folder at the given directory path.

Arguments
- passed_directory_path, required, full dictionary path as string
- debug_mode, optional, boolean

Return
{'result':bool, 'message': string, 'debug': string of exception}

Dependencies
Path: library -> handles converting the passed_directory_path into a windows path object
traceback: library -> for error tracking.

References
3 references
gamehandler.py -> new_game_gui
gamehandler.py -> create_folders (defunct)
savehandler.py -> new_save_gui



Single JSON Getter Fullpath
single_json_getter_fullpath(passed_file_path: str, objectType: str) -> dict

####Overview
Uses the file path and object type to get the contents of a JSON file.

Arguments
- passed_file_path: required, full file path as string
- objectType: required, name of file category as string

Return
get_json_result: {'result': bool, 'message': string, 'json': dictionary}

Dependencies
Path: library -> handles converting the passed_directory_path into a windows path object
json: converting retrieved data as python JSON object.

References
5 references
assethandler -> single_asset_fetch
gamehandler -> get_game
savehandler -> get_saves
savehandler -> load_save
crud -> get_template_json



Get Default Assets List
def get_default_assets_list(passed_directory_path: str) -> list

Overview
Returns a list of parsed default JSON objects from the 'default' subfolder of assets.

Arguments
- passed_directory_path: required, string -> full path to Asset default folder as path.

Return
list of python dictionaries.

Dependencies
Path: library -> handles converting the passed_directory_path into a windows path object
json: library -> handles loading the data from the file as a json object.

References
1 reference
assethandler -> default_assets_fetch



Get Custom Assets List
def get_custom_assets_list(passed_directory_path: str) -> list

Overview
Returns a list of parsed custom asset JSON objects from the 'custom' subfolder of assets.

Arguments
- passed_directory_path: required, string -> full path to Asset default folder as path.

Return
list of python dictionaries.

Dependencies
Path: library -> handles converting the passed_directory_path into a windows path object
json: library -> handles loading the data from the file as a json object.

References
1 reference
assethandler -> custom_asset_fetch



Multi File Getter
def multi_file_getter(passedDirectoryPath: str, objectType: str) -> list

Overview
Recursively looks for, and returns a list of parsed JSON objects at the directory level passed in. Uses the objectType (as a plural) to direct where to look.

Current Issue
If I ask it for 'assets' it gets me ALL assets, both default and custom, which is why 'Get Custom Assets List' and 'Get Default Assets List' were made.
Could be more widely implemented.

Arguments
passedDirectoryPath: required, string -> Path to the directory of the sought after objectType as a string.
objectType: required, string -> given as a plural to tell the function if it needs to look in further folders (default/asset) for assets/effects/events.

Return
A list of json objects converted into python dictionaries.

Dependencies
Path: library -> handles converting the passed_directory_path into a windows path object.
json: library -> handles loading the data from the file as a json object.

References
1 reference
assethandler -> get_assets



Multi File Names Getter
def multi_file_names_getter(passedDirectoryPath: str, objectType: str, debug: bool = False) -> dict

Overview 
Returns the file names of the objects of the targeted type.

Arguments
passedDirectoryPath: required, string -> Path to the directory of the sought after objectTypes as a string.
objectType: required, string -> the type of the logical object given as a plural.
debug: optional, bool -> if given, tells function to print to debug file, add debug section to result_dict.

Return
A dictionary called result in the format: 
{ 'result': bool,
'message': string,
'list': [] }
with optional list with key of 'debug'.

Dependencies
Path: library -> handles converting the passed_directory_path into a windows path object
json: library -> handles loading the data from the file as a json object.
traceback: library -> for more explanation of what error might have been caused.

References
8 references
assethandler -> get_assets_names
assethandler -> get_new_asset_name
gamehandler -> get_games_names
gamehandler -> get_new_game_name
savehandler -> get_save_names
savehandler -> get_new_save_name
edit_asset.py -> possibly broken, retest
edit_asset.py -> possibly broken, retest



